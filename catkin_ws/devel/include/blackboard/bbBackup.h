// Generated by gencpp from file blackboard/bbBackup.msg
// DO NOT EDIT!


#ifndef BLACKBOARD_MESSAGE_BBBACKUP_H
#define BLACKBOARD_MESSAGE_BBBACKUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blackboard
{
template <class ContainerAllocator>
struct bbBackup_
{
  typedef bbBackup_<ContainerAllocator> Type;

  bbBackup_()
    : bbAdress()
    , buAdress()  {
    }
  bbBackup_(const ContainerAllocator& _alloc)
    : bbAdress(_alloc)
    , buAdress(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bbAdress_type;
  _bbAdress_type bbAdress;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _buAdress_type;
  _buAdress_type buAdress;





  typedef boost::shared_ptr< ::blackboard::bbBackup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blackboard::bbBackup_<ContainerAllocator> const> ConstPtr;

}; // struct bbBackup_

typedef ::blackboard::bbBackup_<std::allocator<void> > bbBackup;

typedef boost::shared_ptr< ::blackboard::bbBackup > bbBackupPtr;
typedef boost::shared_ptr< ::blackboard::bbBackup const> bbBackupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blackboard::bbBackup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blackboard::bbBackup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::blackboard::bbBackup_<ContainerAllocator1> & lhs, const ::blackboard::bbBackup_<ContainerAllocator2> & rhs)
{
  return lhs.bbAdress == rhs.bbAdress &&
    lhs.buAdress == rhs.buAdress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::blackboard::bbBackup_<ContainerAllocator1> & lhs, const ::blackboard::bbBackup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace blackboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::bbBackup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::bbBackup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::bbBackup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::bbBackup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::bbBackup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::bbBackup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blackboard::bbBackup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e47aaa65c9ecf31332f737b2f3056288";
  }

  static const char* value(const ::blackboard::bbBackup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe47aaa65c9ecf313ULL;
  static const uint64_t static_value2 = 0x32f737b2f3056288ULL;
};

template<class ContainerAllocator>
struct DataType< ::blackboard::bbBackup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blackboard/bbBackup";
  }

  static const char* value(const ::blackboard::bbBackup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blackboard::bbBackup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string bbAdress\n"
"string buAdress\n"
;
  }

  static const char* value(const ::blackboard::bbBackup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blackboard::bbBackup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bbAdress);
      stream.next(m.buAdress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bbBackup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blackboard::bbBackup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blackboard::bbBackup_<ContainerAllocator>& v)
  {
    s << indent << "bbAdress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bbAdress);
    s << indent << "buAdress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.buAdress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLACKBOARD_MESSAGE_BBBACKUP_H
