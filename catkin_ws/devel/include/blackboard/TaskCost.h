// Generated by gencpp from file blackboard/TaskCost.msg
// DO NOT EDIT!


#ifndef BLACKBOARD_MESSAGE_TASKCOST_H
#define BLACKBOARD_MESSAGE_TASKCOST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blackboard
{
template <class ContainerAllocator>
struct TaskCost_
{
  typedef TaskCost_<ContainerAllocator> Type;

  TaskCost_()
    : taskId(0)
    , taskCost(0.0)
    , robotId(0)
    , energyCost(0.0)  {
    }
  TaskCost_(const ContainerAllocator& _alloc)
    : taskId(0)
    , taskCost(0.0)
    , robotId(0)
    , energyCost(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _taskId_type;
  _taskId_type taskId;

   typedef float _taskCost_type;
  _taskCost_type taskCost;

   typedef int16_t _robotId_type;
  _robotId_type robotId;

   typedef float _energyCost_type;
  _energyCost_type energyCost;





  typedef boost::shared_ptr< ::blackboard::TaskCost_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blackboard::TaskCost_<ContainerAllocator> const> ConstPtr;

}; // struct TaskCost_

typedef ::blackboard::TaskCost_<std::allocator<void> > TaskCost;

typedef boost::shared_ptr< ::blackboard::TaskCost > TaskCostPtr;
typedef boost::shared_ptr< ::blackboard::TaskCost const> TaskCostConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blackboard::TaskCost_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blackboard::TaskCost_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::blackboard::TaskCost_<ContainerAllocator1> & lhs, const ::blackboard::TaskCost_<ContainerAllocator2> & rhs)
{
  return lhs.taskId == rhs.taskId &&
    lhs.taskCost == rhs.taskCost &&
    lhs.robotId == rhs.robotId &&
    lhs.energyCost == rhs.energyCost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::blackboard::TaskCost_<ContainerAllocator1> & lhs, const ::blackboard::TaskCost_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace blackboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskCost_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskCost_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskCost_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskCost_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskCost_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskCost_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blackboard::TaskCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f44cd155759633dbc2acfa15e81bd1c";
  }

  static const char* value(const ::blackboard::TaskCost_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f44cd155759633dULL;
  static const uint64_t static_value2 = 0xbc2acfa15e81bd1cULL;
};

template<class ContainerAllocator>
struct DataType< ::blackboard::TaskCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blackboard/TaskCost";
  }

  static const char* value(const ::blackboard::TaskCost_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blackboard::TaskCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 taskId\n"
"float32 taskCost\n"
"int16 robotId\n"
"float32 energyCost\n"
;
  }

  static const char* value(const ::blackboard::TaskCost_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blackboard::TaskCost_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskId);
      stream.next(m.taskCost);
      stream.next(m.robotId);
      stream.next(m.energyCost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskCost_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blackboard::TaskCost_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blackboard::TaskCost_<ContainerAllocator>& v)
  {
    s << indent << "taskId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskId);
    s << indent << "taskCost: ";
    Printer<float>::stream(s, indent + "  ", v.taskCost);
    s << indent << "robotId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.robotId);
    s << indent << "energyCost: ";
    Printer<float>::stream(s, indent + "  ", v.energyCost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLACKBOARD_MESSAGE_TASKCOST_H
