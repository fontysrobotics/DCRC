// Generated by gencpp from file blackboard/TaskMsg.msg
// DO NOT EDIT!


#ifndef BLACKBOARD_MESSAGE_TASKMSG_H
#define BLACKBOARD_MESSAGE_TASKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace blackboard
{
template <class ContainerAllocator>
struct TaskMsg_
{
  typedef TaskMsg_<ContainerAllocator> Type;

  TaskMsg_()
    : taskId(0)
    , priority(0)
    , taskType(0)
    , payload(0)
    , taskState(0)
    , cost(0.0)
    , energyCost(0.0)
    , robotId(0)
    , pose()  {
    }
  TaskMsg_(const ContainerAllocator& _alloc)
    : taskId(0)
    , priority(0)
    , taskType(0)
    , payload(0)
    , taskState(0)
    , cost(0.0)
    , energyCost(0.0)
    , robotId(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _taskId_type;
  _taskId_type taskId;

   typedef int16_t _priority_type;
  _priority_type priority;

   typedef int16_t _taskType_type;
  _taskType_type taskType;

   typedef int16_t _payload_type;
  _payload_type payload;

   typedef int16_t _taskState_type;
  _taskState_type taskState;

   typedef float _cost_type;
  _cost_type cost;

   typedef float _energyCost_type;
  _energyCost_type energyCost;

   typedef int16_t _robotId_type;
  _robotId_type robotId;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::blackboard::TaskMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blackboard::TaskMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TaskMsg_

typedef ::blackboard::TaskMsg_<std::allocator<void> > TaskMsg;

typedef boost::shared_ptr< ::blackboard::TaskMsg > TaskMsgPtr;
typedef boost::shared_ptr< ::blackboard::TaskMsg const> TaskMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blackboard::TaskMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blackboard::TaskMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::blackboard::TaskMsg_<ContainerAllocator1> & lhs, const ::blackboard::TaskMsg_<ContainerAllocator2> & rhs)
{
  return lhs.taskId == rhs.taskId &&
    lhs.priority == rhs.priority &&
    lhs.taskType == rhs.taskType &&
    lhs.payload == rhs.payload &&
    lhs.taskState == rhs.taskState &&
    lhs.cost == rhs.cost &&
    lhs.energyCost == rhs.energyCost &&
    lhs.robotId == rhs.robotId &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::blackboard::TaskMsg_<ContainerAllocator1> & lhs, const ::blackboard::TaskMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace blackboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blackboard::TaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36aacfc4fa43201ce4e714ef4c2d80ab";
  }

  static const char* value(const ::blackboard::TaskMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36aacfc4fa43201cULL;
  static const uint64_t static_value2 = 0xe4e714ef4c2d80abULL;
};

template<class ContainerAllocator>
struct DataType< ::blackboard::TaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blackboard/TaskMsg";
  }

  static const char* value(const ::blackboard::TaskMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blackboard::TaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 taskId\n"
"int16 priority\n"
"int16 taskType\n"
"int16 payload\n"
"int16 taskState\n"
"float32 cost\n"
"float32 energyCost\n"
"int16 robotId\n"
"geometry_msgs/Pose[] pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::blackboard::TaskMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blackboard::TaskMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskId);
      stream.next(m.priority);
      stream.next(m.taskType);
      stream.next(m.payload);
      stream.next(m.taskState);
      stream.next(m.cost);
      stream.next(m.energyCost);
      stream.next(m.robotId);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blackboard::TaskMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blackboard::TaskMsg_<ContainerAllocator>& v)
  {
    s << indent << "taskId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskId);
    s << indent << "priority: ";
    Printer<int16_t>::stream(s, indent + "  ", v.priority);
    s << indent << "taskType: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskType);
    s << indent << "payload: ";
    Printer<int16_t>::stream(s, indent + "  ", v.payload);
    s << indent << "taskState: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskState);
    s << indent << "cost: ";
    Printer<float>::stream(s, indent + "  ", v.cost);
    s << indent << "energyCost: ";
    Printer<float>::stream(s, indent + "  ", v.energyCost);
    s << indent << "robotId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.robotId);
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLACKBOARD_MESSAGE_TASKMSG_H
