// Generated by gencpp from file blackboard/TaskStateMsg.msg
// DO NOT EDIT!


#ifndef BLACKBOARD_MESSAGE_TASKSTATEMSG_H
#define BLACKBOARD_MESSAGE_TASKSTATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blackboard
{
template <class ContainerAllocator>
struct TaskStateMsg_
{
  typedef TaskStateMsg_<ContainerAllocator> Type;

  TaskStateMsg_()
    : taskId(0)
    , taskState(0)  {
    }
  TaskStateMsg_(const ContainerAllocator& _alloc)
    : taskId(0)
    , taskState(0)  {
  (void)_alloc;
    }



   typedef int16_t _taskId_type;
  _taskId_type taskId;

   typedef int16_t _taskState_type;
  _taskState_type taskState;





  typedef boost::shared_ptr< ::blackboard::TaskStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blackboard::TaskStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TaskStateMsg_

typedef ::blackboard::TaskStateMsg_<std::allocator<void> > TaskStateMsg;

typedef boost::shared_ptr< ::blackboard::TaskStateMsg > TaskStateMsgPtr;
typedef boost::shared_ptr< ::blackboard::TaskStateMsg const> TaskStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blackboard::TaskStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blackboard::TaskStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::blackboard::TaskStateMsg_<ContainerAllocator1> & lhs, const ::blackboard::TaskStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.taskId == rhs.taskId &&
    lhs.taskState == rhs.taskState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::blackboard::TaskStateMsg_<ContainerAllocator1> & lhs, const ::blackboard::TaskStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace blackboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blackboard::TaskStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackboard::TaskStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackboard::TaskStateMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blackboard::TaskStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5ce57945f778c6d07ba18bc1f23f3bf";
  }

  static const char* value(const ::blackboard::TaskStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5ce57945f778c6dULL;
  static const uint64_t static_value2 = 0x07ba18bc1f23f3bfULL;
};

template<class ContainerAllocator>
struct DataType< ::blackboard::TaskStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blackboard/TaskStateMsg";
  }

  static const char* value(const ::blackboard::TaskStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blackboard::TaskStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 taskId\n"
"int16 taskState\n"
;
  }

  static const char* value(const ::blackboard::TaskStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blackboard::TaskStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskId);
      stream.next(m.taskState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blackboard::TaskStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blackboard::TaskStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "taskId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskId);
    s << indent << "taskState: ";
    Printer<int16_t>::stream(s, indent + "  ", v.taskState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLACKBOARD_MESSAGE_TASKSTATEMSG_H
